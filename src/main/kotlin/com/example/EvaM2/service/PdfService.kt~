package com.example.EvaM2.service

import com.example.EvaM2.repository.CertificateRepository
import com.example.EvaM2.repository.CourseRepository
import com.example.EvaM2.repository.StudentsRepository
import com.example.EvaM2.repository.TrainerRepository
import com.itextpdf.layout.element.Paragraph
import com.itextpdf.layout.element.Table
import com.itextpdf.text.Document
import com.itextpdf.text.Paragraph
import com.itextpdf.text.pdf.PdfWriter
import org.springframework.stereotype.Service
import java.io.ByteArrayOutputStream
@Service
class PdfService (
    private val studentsRepository: StudentsRepository,
    private val courseRepository: CourseRepository,
    private val trainerRepository: TrainerRepository,
    private val certificateRepository: CertificateRepository
) {

    fun generateCertificatePdf(dni: String): ByteArray {
        val student = studentsRepository.findByDni(dni)
            ?: throw Exception("Estudiante con DNI $dni no encontrado")

        // Recupera los datos asociados
        val courses = courseRepository.findByStudentId(student.id)
        val trainer = trainerRepository.findTrainerByCourseId(courses[0].id) // Ajustar según tus necesidades
        val certificate = certificateRepository.findCertificateByTrainerId(trainer.id)

        // Prepara el flujo de salida de PDF
        val byteArrayOutputStream = ByteArrayOutputStream()
        val pdfWriter = PdfWriter(byteArrayOutputStream)
        val document = Document(pdfWriter)

        // Agrega información del estudiante
        document.add(Paragraph("Certificado de Finalización"))
        document.add(Paragraph("Nombre: ${student.name}"))
        document.add(Paragraph("DNI: ${student.dni}"))
        document.add(Paragraph("Carrera: ${student.career}"))
        document.add(Paragraph("Ciclo: ${student.cycle}"))

        // Agrega detalles del curso
        val courseTable = Table(floatArrayOf(3f, 3f)).useAllAvailableWidth()
        courseTable.addHeaderCell("Nombre del Curso")
        courseTable.addHeaderCell("Código del Curso")
        courses.forEach { course ->
            courseTable.addCell(course.name)
            courseTable.addCell(course.code)
        }
        document.add(courseTable)

        // Agrega detalles del instructor y del certificado
        document.add(Paragraph("Instructor: ${trainer.name}"))
        document.add(Paragraph("Área: ${trainer.area}"))
        document.add(Paragraph("Horas: ${certificate.hours}"))
        document.add(Paragraph("Fecha: ${certificate.date}"))

        document.close()
        return byteArrayOutputStream.toByteArray()
    }
}